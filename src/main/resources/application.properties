spring.profiles.active=dev
netc.time-sync.interval-in-ms=120000
netc.delegation.active=false
redis.data.timeout-hours=3

#Kafka config
kafka.consumer-group.req-pay=group-req-pay
kafka.consumer-group.retry=group-retry
kafka.consumer-group.init=group-init
kafka.topic.init=acquirer_netc_init_callback
kafka.workers.init=1

server.tomcat.accesslog.pattern="%h %l %u %t '%r' %{Referer}i %{User-Agent}i %s %b %D"
server.tomcat.accesslog.directory=${user.dir}/logs
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
server.tomcat.accesslog.prefix=accessLogHostName
server.tomcat.accesslog.suffix=_access.log
server.tomcat.accesslog.rotate=false
server.tomcat.accesslog.rename-on-rotate=true
http.read.time-out=2000
#retry config
netc.retry-limit.req-pay-max-retry=3
netc.retry-limit.req-get-exception-max-retry=1
netc.retry-limit.req-query-exception-max-retry=1
netc.retry-limit.time-sync-max-retry=3
netc.retry-limit.check-txn-status-max-retry=3
netc.exception-list.ack-delay-ms=500

init-diff-sync.ttl-in-seconds=30
init-diff-sync-key=INIT_DIFF_KEY
netc.diff-overlap-seconds=5

#request retry config
request.retry.max-attempts=3
request.retry.delay-ms=100
request.retry.multiplier=2
request.retry.max-delay-ms=500
request.retry.error-codes=-1
#timeouts in seconds
netc.timeout.resp-pay-timeout=600
netc.timeout.first-resp-get-exception-timeout=1800
netc.timeout.consecutive-resp-get-exception-timeout=120
netc.timeout.first-resp-query-exception-timeout=20
netc.timeout.consecutive-resp-query-exception-timeout=10
netc.timeout.req-get-exception-local-retry-timeout=120
netc.timeout.req-query-exception-local-retry-timeout=10
#circuit breaker config
netc.circuit-breaker.failure-threshold=25
netc.circuit-breaker.ring-buffer-closed=10
netc.circuit-breaker.ring-buffer-half-open=1
netc.circuit-breaker.open-state-wait-duration-ms=1000

log-sample-value=100
redis.retry.max-attempts=3
redis.retry.delay-ms=200

# Redis keys TTL in seconds
redis.ttl.initDataTtl=6000
redis.ttl.diffDataTtl=3600
redis.ttl.msgIdTtl=10800
redis.ttl.reqPayDataTtl=1800
redis.ttl.initInProgressTtl=10800
redis.ttl.initCompletionTtl=3600
redis.ttl.sftpProcessedTtl=3600
redis.ttl.circuitBreakerCounterTtl=21600
redis.ttl.iinParticipantListTtl=25200

resp-pay.wait.max-attempts=4
resp-pay.wait.delay-ms=100
resp-pay.wait.multiplier=2
resp-pay.wait.max-delay-ms=400

s3.retry.max-attempts=4
s3.retry.delay-ms=300
s3.requestTimeoutMs=120000
s3.socketTimeoutMs=30000
diff-s3.retry.max-attempts=1
diff-s3.retry.delay-ms=300
diff-s3.requestTimeoutMs=10000
diff-s3.socketTimeoutMs=10000
redis.connect-timeout=10000
redis.read-timeout=120000
redis.required=true
redis.max-attempts=3
redis.delay-ms=200
#spring.redis.sentinel.master=${FASTAG_ACQUIRER_REDIS_SENTINEL_MASTER}
#spring.redis.sentinel.nodes=${FASTAG_ACQUIRER_REDIS_SENTINEL_NODES}

tas.npci.time-diff=1

pass-manager.saveActivePassForInit=/api/pass-manager/v1/saveActivePassForInit

#dynamic property
dynamic.prop.app.name=fastag-acquirer-netc
